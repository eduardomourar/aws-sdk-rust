// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Options related to a pedestrian.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct WaypointOptimizationPedestrianOptions {
    /// <p>Walking speed.</p>
    /// <p><b>Unit</b>: <code>KilometersPerHour</code></p>
    pub speed: ::std::option::Option<f64>,
}
impl WaypointOptimizationPedestrianOptions {
    /// <p>Walking speed.</p>
    /// <p><b>Unit</b>: <code>KilometersPerHour</code></p>
    pub fn speed(&self) -> ::std::option::Option<f64> {
        self.speed
    }
}
impl ::std::fmt::Debug for WaypointOptimizationPedestrianOptions {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("WaypointOptimizationPedestrianOptions");
        formatter.field("speed", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl WaypointOptimizationPedestrianOptions {
    /// Creates a new builder-style object to manufacture [`WaypointOptimizationPedestrianOptions`](crate::types::WaypointOptimizationPedestrianOptions).
    pub fn builder() -> crate::types::builders::WaypointOptimizationPedestrianOptionsBuilder {
        crate::types::builders::WaypointOptimizationPedestrianOptionsBuilder::default()
    }
}

/// A builder for [`WaypointOptimizationPedestrianOptions`](crate::types::WaypointOptimizationPedestrianOptions).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct WaypointOptimizationPedestrianOptionsBuilder {
    pub(crate) speed: ::std::option::Option<f64>,
}
impl WaypointOptimizationPedestrianOptionsBuilder {
    /// <p>Walking speed.</p>
    /// <p><b>Unit</b>: <code>KilometersPerHour</code></p>
    pub fn speed(mut self, input: f64) -> Self {
        self.speed = ::std::option::Option::Some(input);
        self
    }
    /// <p>Walking speed.</p>
    /// <p><b>Unit</b>: <code>KilometersPerHour</code></p>
    pub fn set_speed(mut self, input: ::std::option::Option<f64>) -> Self {
        self.speed = input;
        self
    }
    /// <p>Walking speed.</p>
    /// <p><b>Unit</b>: <code>KilometersPerHour</code></p>
    pub fn get_speed(&self) -> &::std::option::Option<f64> {
        &self.speed
    }
    /// Consumes the builder and constructs a [`WaypointOptimizationPedestrianOptions`](crate::types::WaypointOptimizationPedestrianOptions).
    pub fn build(self) -> crate::types::WaypointOptimizationPedestrianOptions {
        crate::types::WaypointOptimizationPedestrianOptions { speed: self.speed }
    }
}
impl ::std::fmt::Debug for WaypointOptimizationPedestrianOptionsBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("WaypointOptimizationPedestrianOptionsBuilder");
        formatter.field("speed", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
