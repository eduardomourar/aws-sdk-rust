// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A set of endpoints used by clients to connect to the media service group for an Amazon Chime SDK meeting.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct WebRtcMediaPlacement {
    /// <p>The audio host URL.</p>
    pub audio_host_url: ::std::option::Option<::std::string::String>,
    /// <p>The audio fallback URL.</p>
    pub audio_fallback_url: ::std::option::Option<::std::string::String>,
    /// <p>The signaling URL.</p>
    pub signaling_url: ::std::option::Option<::std::string::String>,
    /// <p>The event ingestion URL to which you send client meeting events.</p>
    pub event_ingestion_url: ::std::option::Option<::std::string::String>,
}
impl WebRtcMediaPlacement {
    /// <p>The audio host URL.</p>
    pub fn audio_host_url(&self) -> ::std::option::Option<&str> {
        self.audio_host_url.as_deref()
    }
    /// <p>The audio fallback URL.</p>
    pub fn audio_fallback_url(&self) -> ::std::option::Option<&str> {
        self.audio_fallback_url.as_deref()
    }
    /// <p>The signaling URL.</p>
    pub fn signaling_url(&self) -> ::std::option::Option<&str> {
        self.signaling_url.as_deref()
    }
    /// <p>The event ingestion URL to which you send client meeting events.</p>
    pub fn event_ingestion_url(&self) -> ::std::option::Option<&str> {
        self.event_ingestion_url.as_deref()
    }
}
impl WebRtcMediaPlacement {
    /// Creates a new builder-style object to manufacture [`WebRtcMediaPlacement`](crate::types::WebRtcMediaPlacement).
    pub fn builder() -> crate::types::builders::WebRtcMediaPlacementBuilder {
        crate::types::builders::WebRtcMediaPlacementBuilder::default()
    }
}

/// A builder for [`WebRtcMediaPlacement`](crate::types::WebRtcMediaPlacement).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct WebRtcMediaPlacementBuilder {
    pub(crate) audio_host_url: ::std::option::Option<::std::string::String>,
    pub(crate) audio_fallback_url: ::std::option::Option<::std::string::String>,
    pub(crate) signaling_url: ::std::option::Option<::std::string::String>,
    pub(crate) event_ingestion_url: ::std::option::Option<::std::string::String>,
}
impl WebRtcMediaPlacementBuilder {
    /// <p>The audio host URL.</p>
    pub fn audio_host_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.audio_host_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The audio host URL.</p>
    pub fn set_audio_host_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.audio_host_url = input;
        self
    }
    /// <p>The audio host URL.</p>
    pub fn get_audio_host_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.audio_host_url
    }
    /// <p>The audio fallback URL.</p>
    pub fn audio_fallback_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.audio_fallback_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The audio fallback URL.</p>
    pub fn set_audio_fallback_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.audio_fallback_url = input;
        self
    }
    /// <p>The audio fallback URL.</p>
    pub fn get_audio_fallback_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.audio_fallback_url
    }
    /// <p>The signaling URL.</p>
    pub fn signaling_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.signaling_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The signaling URL.</p>
    pub fn set_signaling_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.signaling_url = input;
        self
    }
    /// <p>The signaling URL.</p>
    pub fn get_signaling_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.signaling_url
    }
    /// <p>The event ingestion URL to which you send client meeting events.</p>
    pub fn event_ingestion_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.event_ingestion_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The event ingestion URL to which you send client meeting events.</p>
    pub fn set_event_ingestion_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.event_ingestion_url = input;
        self
    }
    /// <p>The event ingestion URL to which you send client meeting events.</p>
    pub fn get_event_ingestion_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.event_ingestion_url
    }
    /// Consumes the builder and constructs a [`WebRtcMediaPlacement`](crate::types::WebRtcMediaPlacement).
    pub fn build(self) -> crate::types::WebRtcMediaPlacement {
        crate::types::WebRtcMediaPlacement {
            audio_host_url: self.audio_host_url,
            audio_fallback_url: self.audio_fallback_url,
            signaling_url: self.signaling_url,
            event_ingestion_url: self.event_ingestion_url,
        }
    }
}
