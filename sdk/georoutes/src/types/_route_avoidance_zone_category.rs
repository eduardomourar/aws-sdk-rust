// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Zone categories to be avoided.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct RouteAvoidanceZoneCategory {
    /// <p>Zone category to be avoided.</p>
    pub category: crate::types::RouteZoneCategory,
}
impl RouteAvoidanceZoneCategory {
    /// <p>Zone category to be avoided.</p>
    pub fn category(&self) -> &crate::types::RouteZoneCategory {
        &self.category
    }
}
impl ::std::fmt::Debug for RouteAvoidanceZoneCategory {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("RouteAvoidanceZoneCategory");
        formatter.field("category", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl RouteAvoidanceZoneCategory {
    /// Creates a new builder-style object to manufacture [`RouteAvoidanceZoneCategory`](crate::types::RouteAvoidanceZoneCategory).
    pub fn builder() -> crate::types::builders::RouteAvoidanceZoneCategoryBuilder {
        crate::types::builders::RouteAvoidanceZoneCategoryBuilder::default()
    }
}

/// A builder for [`RouteAvoidanceZoneCategory`](crate::types::RouteAvoidanceZoneCategory).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct RouteAvoidanceZoneCategoryBuilder {
    pub(crate) category: ::std::option::Option<crate::types::RouteZoneCategory>,
}
impl RouteAvoidanceZoneCategoryBuilder {
    /// <p>Zone category to be avoided.</p>
    /// This field is required.
    pub fn category(mut self, input: crate::types::RouteZoneCategory) -> Self {
        self.category = ::std::option::Option::Some(input);
        self
    }
    /// <p>Zone category to be avoided.</p>
    pub fn set_category(mut self, input: ::std::option::Option<crate::types::RouteZoneCategory>) -> Self {
        self.category = input;
        self
    }
    /// <p>Zone category to be avoided.</p>
    pub fn get_category(&self) -> &::std::option::Option<crate::types::RouteZoneCategory> {
        &self.category
    }
    /// Consumes the builder and constructs a [`RouteAvoidanceZoneCategory`](crate::types::RouteAvoidanceZoneCategory).
    /// This method will fail if any of the following fields are not set:
    /// - [`category`](crate::types::builders::RouteAvoidanceZoneCategoryBuilder::category)
    pub fn build(self) -> ::std::result::Result<crate::types::RouteAvoidanceZoneCategory, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RouteAvoidanceZoneCategory {
            category: self.category.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "category",
                    "category was not specified but it is required when building RouteAvoidanceZoneCategory",
                )
            })?,
        })
    }
}
impl ::std::fmt::Debug for RouteAvoidanceZoneCategoryBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("RouteAvoidanceZoneCategoryBuilder");
        formatter.field("category", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
