// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Features that are allowed while calculating a route.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct RouteAllowOptions {
    /// <p>Allow Hot (High Occupancy Toll) lanes while calculating the route.</p>
    /// <p>Default value: <code>false</code></p>
    pub hot: ::std::option::Option<bool>,
    /// <p>Allow Hov (High Occupancy vehicle) lanes while calculating the route.</p>
    /// <p>Default value: <code>false</code></p>
    pub hov: ::std::option::Option<bool>,
}
impl RouteAllowOptions {
    /// <p>Allow Hot (High Occupancy Toll) lanes while calculating the route.</p>
    /// <p>Default value: <code>false</code></p>
    pub fn hot(&self) -> ::std::option::Option<bool> {
        self.hot
    }
    /// <p>Allow Hov (High Occupancy vehicle) lanes while calculating the route.</p>
    /// <p>Default value: <code>false</code></p>
    pub fn hov(&self) -> ::std::option::Option<bool> {
        self.hov
    }
}
impl ::std::fmt::Debug for RouteAllowOptions {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("RouteAllowOptions");
        formatter.field("hot", &"*** Sensitive Data Redacted ***");
        formatter.field("hov", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl RouteAllowOptions {
    /// Creates a new builder-style object to manufacture [`RouteAllowOptions`](crate::types::RouteAllowOptions).
    pub fn builder() -> crate::types::builders::RouteAllowOptionsBuilder {
        crate::types::builders::RouteAllowOptionsBuilder::default()
    }
}

/// A builder for [`RouteAllowOptions`](crate::types::RouteAllowOptions).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct RouteAllowOptionsBuilder {
    pub(crate) hot: ::std::option::Option<bool>,
    pub(crate) hov: ::std::option::Option<bool>,
}
impl RouteAllowOptionsBuilder {
    /// <p>Allow Hot (High Occupancy Toll) lanes while calculating the route.</p>
    /// <p>Default value: <code>false</code></p>
    pub fn hot(mut self, input: bool) -> Self {
        self.hot = ::std::option::Option::Some(input);
        self
    }
    /// <p>Allow Hot (High Occupancy Toll) lanes while calculating the route.</p>
    /// <p>Default value: <code>false</code></p>
    pub fn set_hot(mut self, input: ::std::option::Option<bool>) -> Self {
        self.hot = input;
        self
    }
    /// <p>Allow Hot (High Occupancy Toll) lanes while calculating the route.</p>
    /// <p>Default value: <code>false</code></p>
    pub fn get_hot(&self) -> &::std::option::Option<bool> {
        &self.hot
    }
    /// <p>Allow Hov (High Occupancy vehicle) lanes while calculating the route.</p>
    /// <p>Default value: <code>false</code></p>
    pub fn hov(mut self, input: bool) -> Self {
        self.hov = ::std::option::Option::Some(input);
        self
    }
    /// <p>Allow Hov (High Occupancy vehicle) lanes while calculating the route.</p>
    /// <p>Default value: <code>false</code></p>
    pub fn set_hov(mut self, input: ::std::option::Option<bool>) -> Self {
        self.hov = input;
        self
    }
    /// <p>Allow Hov (High Occupancy vehicle) lanes while calculating the route.</p>
    /// <p>Default value: <code>false</code></p>
    pub fn get_hov(&self) -> &::std::option::Option<bool> {
        &self.hov
    }
    /// Consumes the builder and constructs a [`RouteAllowOptions`](crate::types::RouteAllowOptions).
    pub fn build(self) -> crate::types::RouteAllowOptions {
        crate::types::RouteAllowOptions {
            hot: self.hot,
            hov: self.hov,
        }
    }
}
impl ::std::fmt::Debug for RouteAllowOptionsBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("RouteAllowOptionsBuilder");
        formatter.field("hot", &"*** Sensitive Data Redacted ***");
        formatter.field("hov", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
