// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Driver work-rest schedules defined by a short and long cycle. A rest needs to be taken after the short work duration. The short cycle can be repeated until you hit the long work duration, at which point the long rest duration should be taken before restarting.</p>
/// <p><b>Unit</b>: <code>seconds</code></p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct WaypointOptimizationRestCycleDurations {
    /// <p>Resting phase of the cycle.</p>
    /// <p><b>Unit</b>: <code>seconds</code></p>
    pub rest_duration: i64,
    /// <p>Working phase of the cycle.</p>
    /// <p><b>Unit</b>: <code>seconds</code></p>
    pub work_duration: i64,
}
impl WaypointOptimizationRestCycleDurations {
    /// <p>Resting phase of the cycle.</p>
    /// <p><b>Unit</b>: <code>seconds</code></p>
    pub fn rest_duration(&self) -> i64 {
        self.rest_duration
    }
    /// <p>Working phase of the cycle.</p>
    /// <p><b>Unit</b>: <code>seconds</code></p>
    pub fn work_duration(&self) -> i64 {
        self.work_duration
    }
}
impl ::std::fmt::Debug for WaypointOptimizationRestCycleDurations {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("WaypointOptimizationRestCycleDurations");
        formatter.field("rest_duration", &"*** Sensitive Data Redacted ***");
        formatter.field("work_duration", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl WaypointOptimizationRestCycleDurations {
    /// Creates a new builder-style object to manufacture [`WaypointOptimizationRestCycleDurations`](crate::types::WaypointOptimizationRestCycleDurations).
    pub fn builder() -> crate::types::builders::WaypointOptimizationRestCycleDurationsBuilder {
        crate::types::builders::WaypointOptimizationRestCycleDurationsBuilder::default()
    }
}

/// A builder for [`WaypointOptimizationRestCycleDurations`](crate::types::WaypointOptimizationRestCycleDurations).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct WaypointOptimizationRestCycleDurationsBuilder {
    pub(crate) rest_duration: ::std::option::Option<i64>,
    pub(crate) work_duration: ::std::option::Option<i64>,
}
impl WaypointOptimizationRestCycleDurationsBuilder {
    /// <p>Resting phase of the cycle.</p>
    /// <p><b>Unit</b>: <code>seconds</code></p>
    /// This field is required.
    pub fn rest_duration(mut self, input: i64) -> Self {
        self.rest_duration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Resting phase of the cycle.</p>
    /// <p><b>Unit</b>: <code>seconds</code></p>
    pub fn set_rest_duration(mut self, input: ::std::option::Option<i64>) -> Self {
        self.rest_duration = input;
        self
    }
    /// <p>Resting phase of the cycle.</p>
    /// <p><b>Unit</b>: <code>seconds</code></p>
    pub fn get_rest_duration(&self) -> &::std::option::Option<i64> {
        &self.rest_duration
    }
    /// <p>Working phase of the cycle.</p>
    /// <p><b>Unit</b>: <code>seconds</code></p>
    /// This field is required.
    pub fn work_duration(mut self, input: i64) -> Self {
        self.work_duration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Working phase of the cycle.</p>
    /// <p><b>Unit</b>: <code>seconds</code></p>
    pub fn set_work_duration(mut self, input: ::std::option::Option<i64>) -> Self {
        self.work_duration = input;
        self
    }
    /// <p>Working phase of the cycle.</p>
    /// <p><b>Unit</b>: <code>seconds</code></p>
    pub fn get_work_duration(&self) -> &::std::option::Option<i64> {
        &self.work_duration
    }
    /// Consumes the builder and constructs a [`WaypointOptimizationRestCycleDurations`](crate::types::WaypointOptimizationRestCycleDurations).
    pub fn build(self) -> crate::types::WaypointOptimizationRestCycleDurations {
        crate::types::WaypointOptimizationRestCycleDurations {
            rest_duration: self.rest_duration.unwrap_or_default(),
            work_duration: self.work_duration.unwrap_or_default(),
        }
    }
}
impl ::std::fmt::Debug for WaypointOptimizationRestCycleDurationsBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("WaypointOptimizationRestCycleDurationsBuilder");
        formatter.field("rest_duration", &"*** Sensitive Data Redacted ***");
        formatter.field("work_duration", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
