// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Creates the participantâ€™s WebRTC connection data required for the client application (mobile or web) to connect to the call.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct WebRtcConnection {
    /// <p>The attendee information, including attendee ID and join token.</p>
    pub attendee: ::std::option::Option<crate::types::Attendee>,
    /// <p>A meeting created using the Amazon Chime SDK.</p>
    pub meeting: ::std::option::Option<crate::types::WebRtcMeeting>,
}
impl WebRtcConnection {
    /// <p>The attendee information, including attendee ID and join token.</p>
    pub fn attendee(&self) -> ::std::option::Option<&crate::types::Attendee> {
        self.attendee.as_ref()
    }
    /// <p>A meeting created using the Amazon Chime SDK.</p>
    pub fn meeting(&self) -> ::std::option::Option<&crate::types::WebRtcMeeting> {
        self.meeting.as_ref()
    }
}
impl WebRtcConnection {
    /// Creates a new builder-style object to manufacture [`WebRtcConnection`](crate::types::WebRtcConnection).
    pub fn builder() -> crate::types::builders::WebRtcConnectionBuilder {
        crate::types::builders::WebRtcConnectionBuilder::default()
    }
}

/// A builder for [`WebRtcConnection`](crate::types::WebRtcConnection).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct WebRtcConnectionBuilder {
    pub(crate) attendee: ::std::option::Option<crate::types::Attendee>,
    pub(crate) meeting: ::std::option::Option<crate::types::WebRtcMeeting>,
}
impl WebRtcConnectionBuilder {
    /// <p>The attendee information, including attendee ID and join token.</p>
    pub fn attendee(mut self, input: crate::types::Attendee) -> Self {
        self.attendee = ::std::option::Option::Some(input);
        self
    }
    /// <p>The attendee information, including attendee ID and join token.</p>
    pub fn set_attendee(mut self, input: ::std::option::Option<crate::types::Attendee>) -> Self {
        self.attendee = input;
        self
    }
    /// <p>The attendee information, including attendee ID and join token.</p>
    pub fn get_attendee(&self) -> &::std::option::Option<crate::types::Attendee> {
        &self.attendee
    }
    /// <p>A meeting created using the Amazon Chime SDK.</p>
    pub fn meeting(mut self, input: crate::types::WebRtcMeeting) -> Self {
        self.meeting = ::std::option::Option::Some(input);
        self
    }
    /// <p>A meeting created using the Amazon Chime SDK.</p>
    pub fn set_meeting(mut self, input: ::std::option::Option<crate::types::WebRtcMeeting>) -> Self {
        self.meeting = input;
        self
    }
    /// <p>A meeting created using the Amazon Chime SDK.</p>
    pub fn get_meeting(&self) -> &::std::option::Option<crate::types::WebRtcMeeting> {
        &self.meeting
    }
    /// Consumes the builder and constructs a [`WebRtcConnection`](crate::types::WebRtcConnection).
    pub fn build(self) -> crate::types::WebRtcConnection {
        crate::types::WebRtcConnection {
            attendee: self.attendee,
            meeting: self.meeting,
        }
    }
}
