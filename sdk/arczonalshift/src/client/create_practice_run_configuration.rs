// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreatePracticeRunConfiguration`](crate::operation::create_practice_run_configuration::builders::CreatePracticeRunConfigurationFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_identifier(impl Into<String>)`](crate::operation::create_practice_run_configuration::builders::CreatePracticeRunConfigurationFluentBuilder::resource_identifier) / [`set_resource_identifier(Option<String>)`](crate::operation::create_practice_run_configuration::builders::CreatePracticeRunConfigurationFluentBuilder::set_resource_identifier):<br>required: **true**<br><p>The identifier of the resource that Amazon Web Services shifts traffic for with a practice run zonal shift. The identifier is the Amazon Resource Name (ARN) for the resource.</p> <p>Amazon Application Recovery Controller currently supports enabling the following resources for zonal shift and zonal autoshift:</p> <ul>  <li>   <p><a href="https://docs.aws.amazon.com/r53recovery/latest/dg/arc-zonal-shift.resource-types.ec2-auto-scaling-groups.html">Amazon EC2 Auto Scaling groups</a></p></li>  <li>   <p><a href="https://docs.aws.amazon.com/r53recovery/latest/dg/arc-zonal-shift.resource-types.eks.html">Amazon Elastic Kubernetes Service</a></p></li>  <li>   <p><a href="https://docs.aws.amazon.com/r53recovery/latest/dg/arc-zonal-shift.resource-types.app-load-balancers.html">Application Load Balancer</a></p></li>  <li>   <p><a href="https://docs.aws.amazon.com/r53recovery/latest/dg/arc-zonal-shift.resource-types.network-load-balancers.html">Network Load Balancer</a></p></li> </ul><br>
    ///   - [`blocked_windows(impl Into<String>)`](crate::operation::create_practice_run_configuration::builders::CreatePracticeRunConfigurationFluentBuilder::blocked_windows) / [`set_blocked_windows(Option<Vec::<String>>)`](crate::operation::create_practice_run_configuration::builders::CreatePracticeRunConfigurationFluentBuilder::set_blocked_windows):<br>required: **false**<br><p>Optionally, you can block ARC from starting practice runs for specific windows of days and times.</p> <p>The format for blocked windows is: DAY:HH:SS-DAY:HH:SS. Keep in mind, when you specify dates, that dates and times for practice runs are in UTC. Also, be aware of potential time adjustments that might be required for daylight saving time differences. Separate multiple blocked windows with spaces.</p> <p>For example, say you run business report summaries three days a week. For this scenario, you could set the following recurring days and times as blocked windows, for example: <code>Mon:00:00-Mon:10:00 Wed-20:30-Wed:21:30 Fri-20:30-Fri:21:30</code>.</p><important>  <p>The <code>blockedWindows</code> have to start and end on the same day. Windows that span multiple days aren't supported.</p> </important><br>
    ///   - [`blocked_dates(impl Into<String>)`](crate::operation::create_practice_run_configuration::builders::CreatePracticeRunConfigurationFluentBuilder::blocked_dates) / [`set_blocked_dates(Option<Vec::<String>>)`](crate::operation::create_practice_run_configuration::builders::CreatePracticeRunConfigurationFluentBuilder::set_blocked_dates):<br>required: **false**<br><p>Optionally, you can block ARC from starting practice runs for a resource on specific calendar dates.</p> <p>The format for blocked dates is: YYYY-MM-DD. Keep in mind, when you specify dates, that dates and times for practice runs are in UTC. Separate multiple blocked dates with spaces.</p> <p>For example, if you have an application update scheduled to launch on May 1, 2024, and you don't want practice runs to shift traffic away at that time, you could set a blocked date for <code>2024-05-01</code>.</p><br>
    ///   - [`blocking_alarms(ControlCondition)`](crate::operation::create_practice_run_configuration::builders::CreatePracticeRunConfigurationFluentBuilder::blocking_alarms) / [`set_blocking_alarms(Option<Vec::<ControlCondition>>)`](crate::operation::create_practice_run_configuration::builders::CreatePracticeRunConfigurationFluentBuilder::set_blocking_alarms):<br>required: **false**<br><p><i>Blocking alarms</i> for practice runs are optional alarms that you can specify that block practice runs when one or more of the alarms is in an <code>ALARM</code> state.</p><br>
    ///   - [`allowed_windows(impl Into<String>)`](crate::operation::create_practice_run_configuration::builders::CreatePracticeRunConfigurationFluentBuilder::allowed_windows) / [`set_allowed_windows(Option<Vec::<String>>)`](crate::operation::create_practice_run_configuration::builders::CreatePracticeRunConfigurationFluentBuilder::set_allowed_windows):<br>required: **false**<br><p>Optionally, you can allow ARC to start practice runs for specific windows of days and times.</p> <p>The format for allowed windows is: DAY:HH:SS-DAY:HH:SS. Keep in mind, when you specify dates, that dates and times for practice runs are in UTC. Also, be aware of potential time adjustments that might be required for daylight saving time differences. Separate multiple allowed windows with spaces.</p> <p>For example, say you want to allow practice runs only on Wednesdays and Fridays from noon to 5 p.m. For this scenario, you could set the following recurring days and times as allowed windows, for example: <code>Wed-12:00-Wed:17:00 Fri-12:00-Fri:17:00</code>.</p><important>  <p>The <code>allowedWindows</code> have to start and end on the same day. Windows that span multiple days aren't supported.</p> </important><br>
    ///   - [`outcome_alarms(ControlCondition)`](crate::operation::create_practice_run_configuration::builders::CreatePracticeRunConfigurationFluentBuilder::outcome_alarms) / [`set_outcome_alarms(Option<Vec::<ControlCondition>>)`](crate::operation::create_practice_run_configuration::builders::CreatePracticeRunConfigurationFluentBuilder::set_outcome_alarms):<br>required: **true**<br><p><i>Outcome alarms</i> for practice runs are alarms that you specify that end a practice run when one or more of the alarms is in an <code>ALARM</code> state.</p> <p>Configure one or more of these alarms to monitor the health of your application when traffic is shifted away from an Availability Zone during each practice run. You should configure these alarms to go into an <code>ALARM</code> state if you want to stop a zonal shift, to let traffic for the resource return to the original Availability Zone.</p><br>
    /// - On success, responds with [`CreatePracticeRunConfigurationOutput`](crate::operation::create_practice_run_configuration::CreatePracticeRunConfigurationOutput) with field(s):
    ///   - [`arn(String)`](crate::operation::create_practice_run_configuration::CreatePracticeRunConfigurationOutput::arn): <p>The Amazon Resource Name (ARN) of the resource that you configured the practice run for.</p>
    ///   - [`name(String)`](crate::operation::create_practice_run_configuration::CreatePracticeRunConfigurationOutput::name): <p>The name of the resource that you configured the practice run for.</p>
    ///   - [`zonal_autoshift_status(ZonalAutoshiftStatus)`](crate::operation::create_practice_run_configuration::CreatePracticeRunConfigurationOutput::zonal_autoshift_status): <p>The status for zonal autoshift for a resource. When you specify <code>ENABLED</code> for the autoshift status, Amazon Web Services shifts traffic away from shifts away application resource traffic from an Availability Zone, on your behalf, when internal telemetry indicates that there is an Availability Zone impairment that could potentially impact customers.</p> <p>When you enable zonal autoshift, you must also configure practice runs for the resource.</p>
    ///   - [`practice_run_configuration(Option<PracticeRunConfiguration>)`](crate::operation::create_practice_run_configuration::CreatePracticeRunConfigurationOutput::practice_run_configuration): <p>A practice run configuration for a resource. Configurations include the outcome alarm that you specify for practice runs, and, optionally, a blocking alarm and blocking dates and windows.</p>
    /// - On failure, responds with [`SdkError<CreatePracticeRunConfigurationError>`](crate::operation::create_practice_run_configuration::CreatePracticeRunConfigurationError)
    pub fn create_practice_run_configuration(
        &self,
    ) -> crate::operation::create_practice_run_configuration::builders::CreatePracticeRunConfigurationFluentBuilder {
        crate::operation::create_practice_run_configuration::builders::CreatePracticeRunConfigurationFluentBuilder::new(self.handle.clone())
    }
}
