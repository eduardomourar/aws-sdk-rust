// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The vehicle license plate.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct IsolineVehicleLicensePlate {
    /// <p>The last character of the License Plate.</p>
    pub last_character: ::std::option::Option<::std::string::String>,
}
impl IsolineVehicleLicensePlate {
    /// <p>The last character of the License Plate.</p>
    pub fn last_character(&self) -> ::std::option::Option<&str> {
        self.last_character.as_deref()
    }
}
impl ::std::fmt::Debug for IsolineVehicleLicensePlate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("IsolineVehicleLicensePlate");
        formatter.field("last_character", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl IsolineVehicleLicensePlate {
    /// Creates a new builder-style object to manufacture [`IsolineVehicleLicensePlate`](crate::types::IsolineVehicleLicensePlate).
    pub fn builder() -> crate::types::builders::IsolineVehicleLicensePlateBuilder {
        crate::types::builders::IsolineVehicleLicensePlateBuilder::default()
    }
}

/// A builder for [`IsolineVehicleLicensePlate`](crate::types::IsolineVehicleLicensePlate).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct IsolineVehicleLicensePlateBuilder {
    pub(crate) last_character: ::std::option::Option<::std::string::String>,
}
impl IsolineVehicleLicensePlateBuilder {
    /// <p>The last character of the License Plate.</p>
    pub fn last_character(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.last_character = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The last character of the License Plate.</p>
    pub fn set_last_character(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.last_character = input;
        self
    }
    /// <p>The last character of the License Plate.</p>
    pub fn get_last_character(&self) -> &::std::option::Option<::std::string::String> {
        &self.last_character
    }
    /// Consumes the builder and constructs a [`IsolineVehicleLicensePlate`](crate::types::IsolineVehicleLicensePlate).
    pub fn build(self) -> crate::types::IsolineVehicleLicensePlate {
        crate::types::IsolineVehicleLicensePlate {
            last_character: self.last_character,
        }
    }
}
impl ::std::fmt::Debug for IsolineVehicleLicensePlateBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("IsolineVehicleLicensePlateBuilder");
        formatter.field("last_character", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
