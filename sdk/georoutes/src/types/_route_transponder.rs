// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Transponders for which this toll can be applied.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct RouteTransponder {
    /// <p>Names of the toll system collecting the toll.</p>
    pub system_name: ::std::option::Option<::std::string::String>,
}
impl RouteTransponder {
    /// <p>Names of the toll system collecting the toll.</p>
    pub fn system_name(&self) -> ::std::option::Option<&str> {
        self.system_name.as_deref()
    }
}
impl ::std::fmt::Debug for RouteTransponder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("RouteTransponder");
        formatter.field("system_name", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl RouteTransponder {
    /// Creates a new builder-style object to manufacture [`RouteTransponder`](crate::types::RouteTransponder).
    pub fn builder() -> crate::types::builders::RouteTransponderBuilder {
        crate::types::builders::RouteTransponderBuilder::default()
    }
}

/// A builder for [`RouteTransponder`](crate::types::RouteTransponder).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct RouteTransponderBuilder {
    pub(crate) system_name: ::std::option::Option<::std::string::String>,
}
impl RouteTransponderBuilder {
    /// <p>Names of the toll system collecting the toll.</p>
    pub fn system_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.system_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Names of the toll system collecting the toll.</p>
    pub fn set_system_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.system_name = input;
        self
    }
    /// <p>Names of the toll system collecting the toll.</p>
    pub fn get_system_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.system_name
    }
    /// Consumes the builder and constructs a [`RouteTransponder`](crate::types::RouteTransponder).
    pub fn build(self) -> crate::types::RouteTransponder {
        crate::types::RouteTransponder {
            system_name: self.system_name,
        }
    }
}
impl ::std::fmt::Debug for RouteTransponderBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("RouteTransponderBuilder");
        formatter.field("system_name", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
